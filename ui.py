import streamlit as st




# Kh·ªüi t·∫°o tr·∫°ng th√°i phi√™n cho tin nh·∫Øn v√† l·ªãch s·ª≠ nh·∫≠p li·ªáu
if "messages" not in st.session_state:
    st.session_state.messages = []

if "user_input" not in st.session_state:
    st.session_state.user_input = ""

if "suggestions" not in st.session_state:
    st.session_state.suggestions = []


# from main import response
# def api_chatbot(query):
#     history_msg = ""
#     for message in st.session_state.messages:
#         role = "User" if message["role"] == "user" else "Bot"
#         history_msg += f"{role}: {message['content']}\n"
#     return response(query, history_msg)



from prompt.dspy_prompt import get_rseponse_with_dspy
def api_chatbot_dspy(query):
    history_msg = ""
    for message in st.session_state.messages:
        role = "User" if message["role"] == "user" else "Bot"
        history_msg += f"{role}: {message['content']}\n"
    return get_rseponse_with_dspy(query, history_msg)


def main():
    st.set_page_config(
        page_title="Chatbot",
        page_icon="ü§ñ",
        layout="centered",
    )

    # Hi·ªÉn th·ªã c√°c tin nh·∫Øn tr∆∞·ªõc ƒë√≥ t·ª´ l·ªãch s·ª≠ tr√≤ chuy·ªán
    for idx, msg in enumerate(st.session_state.messages):
        with st.chat_message(msg['role']):
            st.markdown(msg['content'])

    # Nh·∫≠n ƒë·∫ßu v√†o c·ªßa ng∆∞·ªùi d√πng
    user_input = st.chat_input("What is your question?")

    if user_input:
        # Hi·ªÉn th·ªã tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
        with st.chat_message("user"):
            st.markdown(user_input)

        # Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o tr·∫°ng th√°i phi√™n
        st.session_state.messages.append({"role": "user", "content": user_input})

        # L·∫•y ph·∫£n h·ªìi v√† g·ª£i √Ω t·ª´ bot
        answer, suggestions = api_chatbot_dspy(user_input)  # api_chatbot_dspy(user_input)

        # Hi·ªÉn th·ªã ph·∫£n h·ªìi c·ªßa bot
        with st.chat_message("assistant"):
            st.markdown(answer)

        # Th√™m ph·∫£n h·ªìi c·ªßa bot v√†o tr·∫°ng th√°i phi√™n
        st.session_state.messages.append({"role": "assistant", "content": answer})

        # C·∫≠p nh·∫≠t g·ª£i √Ω trong tr·∫°ng th√°i phi√™n (ƒë·ªÉ hi·ªÉn th·ªã d∆∞·ªõi d·∫°ng n√∫t)
        st.session_state.suggestions = suggestions

        # X√≥a tr∆∞·ªùng nh·∫≠p li·ªáu c·ªßa ng∆∞·ªùi d√πng sau khi g·ª≠i tin nh·∫Øn
        st.session_state.user_input = ""

    # T·∫°o c√°c v·ªã tr√≠ tr·ªëng cho c√°c n√∫t g·ª£i √Ω
    suggestion_placeholders = [st.empty() for _ in range(3)]

    # Hi·ªÉn th·ªã c√°c n√∫t g·ª£i √Ω m·ªõi n·∫øu c√≥
    if st.session_state.suggestions:
        for i, suggestion in enumerate(st.session_state.suggestions):
            with suggestion_placeholders[i]:
                if st.button(suggestion, key=f"button_{suggestion}"):
                    # X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n v√†o m·ªôt g·ª£i √Ω
                    with st.chat_message("user"):
                        st.markdown(suggestion)

                    # Th√™m g·ª£i √Ω nh∆∞ m·ªôt tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o tr·∫°ng th√°i phi√™n
                    st.session_state.messages.append({"role": "user", "content": suggestion})

                    # L·∫•y ph·∫£n h·ªìi v√† g·ª£i √Ω m·ªõi t·ª´ bot
                    answer, suggestions = api_chatbot_dspy(suggestion)  # api_chatbot_dspy(suggestion)

                    # Hi·ªÉn th·ªã ph·∫£n h·ªìi c·ªßa bot
                    with st.chat_message("assistant"):
                        st.markdown(answer)

                    # Th√™m ph·∫£n h·ªìi c·ªßa bot v√†o tr·∫°ng th√°i phi√™n
                    st.session_state.messages.append({"role": "assistant", "content": answer})

                    # C·∫≠p nh·∫≠t g·ª£i √Ω m·ªõi trong tr·∫°ng th√°i phi√™n
                    st.session_state.suggestions = suggestions

                    # X√≥a tr∆∞·ªùng nh·∫≠p li·ªáu c·ªßa ng∆∞·ªùi d√πng sau khi g·ª≠i tin nh·∫Øn
                    st.session_state.user_input = ""

                    # Reload
                    st.rerun()  # S·ª≠ d·ª•ng st.experimental_rerun() ƒë·ªÉ l√†m m·ªõi ·ª©ng d·ª•ng


if __name__ == "__main__":
    main()
